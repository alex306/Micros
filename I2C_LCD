#include <hidef.h> /* for EnableInterrupts macro */
#include "derivative.h" /* include peripheral declarations */

/**********         Variables serial           **********/
unsigned char comando_RPS[] = {"RPS"};
unsigned char comando_DIR[] = {"DIR:C"};
unsigned char comando_MOTOR[] = {"MOTOR:O"};
unsigned char comando_STEPCW[] = {"STEPCW"};
unsigned char comando_TEMPLIMIT[] = {"TEMPLIMIT:"};
unsigned char command_ex[] = {"DONE\n\r"};
unsigned char command_unrecognized[] = {"Comando no reconocido"};
//unsigned char command_tempeture[] = {"Temperatura es    .  \n\r"}; //15 16 17 19
unsigned char command_tempeture[] = {"Temperatura es \n\r"};
unsigned char mensaje_temp_limit[] = {"Overtemperature detected\n\r"};
unsigned char command_turnoff[] = {"Apagar motor"};
unsigned char i, c, caracter, on_off, size, choose_command, imprimir_comando;
unsigned char imprimir_comando_tempover = 0;
unsigned char count_comando = 0;
unsigned char count_comando2 = 0;
unsigned char data;
unsigned char temp[16];
unsigned char cuenta = 15;
unsigned char counter, counter2, j, coincidencia;
unsigned char enable_transmission, unidades, decenas, decenas2, unidades2, timer, decenas3, unidades3, decimal, movimiento, checar_arreglo;
unsigned int centenas, grados, mover_en_grados, vueltas_arreglo, contador_generar_tiempo, centenas2, contador_generar_tiempo2, centenas3;
unsigned int velocidad;
unsigned char imprimir_comando_done = 0;
unsigned int millares, temperatura_limite, temperatura_ADC;
unsigned int tiempo_timer = 0;
unsigned int tiempo_LED = 0;
unsigned char encender_LED = 0;
unsigned char checar_temperatura = 0;
unsigned char imprimir_temperatura = 0;
unsigned char seguir = 0;


/**********         Variables motor           **********/
unsigned char correr_secuencia = 0;
unsigned char secuencia[]={0x7F,0x3F,0xBF,0x9F,0xDF,0xCF,0xEF,0x6F};//Secuencia de pasos usando lógica negativa (código gray)
unsigned char posicion = 0;
unsigned int value;
unsigned int range;
unsigned char cambiar_direccion = 0;
unsigned int contador_timer;

/**********         Variables LCD           **********/
char initialization_ends = 0;
char state = 0;
char state2 = 0;
char interruption_flag = 0;
char dir_reloj[] = {"CW - 000.0 C"};
char dir_inversa_reloj[] = {"CCW - 000.0 C"};
char rps_arr[] = {"00.0 RPM"};
char low;
char high;
char i2 = 0;
char j2 = 0;
char i3 = 0;
char j3 = 0;
char i4 = 0;
char j4 = 0;
char send_data_off = 0;
char beginning_data = 0;

char enviar_LCD = 0;
char state3 = 0;
char regresar_pos = 0;
char state4 = 0;
char state5 = 0;
char send_data_off_2 = 0;
char send_data_off_3 = 0;
char send_data_off_4 = 0;
char send_data_off_5 = 0;
char enviar_RPS = 0;
char i5 = 0;
char j5 = 0;
char state6 = 0;
char state7 = 0;
char pos_linea_dos = 0;
char beginning_data2 = 0;
char pos_linea_inicial = 0;
char enviar_RPS_inicial = 0;
unsigned int pot = 0;
unsigned int temp_limit_LCD = 2000;
unsigned char comando_temp_limit = 0;
unsigned char rps_run = 0;
unsigned int contador_rps = 0;
unsigned int rps_velocidad = 0;
unsigned int potentiometer, op;
char wait_LCD = 0;
unsigned int contador_wait_LCD = 0;
unsigned char undone = 0;
unsigned int temperatura=0;
char state_linea_inicial = 0;
char state_rps_inicial = 0;
char i6 = 0;
char j6 = 0;

void seleccionar_comando(void);
void check_buffer(void);
unsigned int operacion_grados(unsigned int grados_parametro);
unsigned int operacionTemp(void);
void led(void);
void num_to_character(void);
/********     LCD      ********/
void init_LCD(void);
void initial_data(void);
void char_low_data(char letra);
void char_high_data(char letra);
void send_command(void);
void send_dir(void);
void send_inverse_dir(void);
void send_RPS(void);
unsigned int operacionRPS(void);
unsigned int operacion(void);
//void char_low_command(char letra);
//void char_high_command(char letra);

interrupt 15 void UART_rx(void) //receive
{
	(void) SCIS1;
	data = SCID;
	if(data == 13){
		SCID = '\n';
		checar_arreglo = 1;
		seguir = 0;
	}
	else{
		temp[seguir++] = data;
	}
}

interrupt 16 void UART_tx(void){ //transmit
	(void) SCIS1;
	if(imprimir_comando_done == 1){
		if(command_ex[count_comando] != 0){
			SCID = command_ex[count_comando++];
			//count_comando++;
		}
		else{
			count_comando=0;
			imprimir_comando_done = 0;
			SCIC2_TIE = 0;
		}
	}
	if(imprimir_comando_tempover == 1){
		if(mensaje_temp_limit[count_comando2] != 0){
			SCID = mensaje_temp_limit[count_comando2++];
		}
		else{
			count_comando2=0;
			imprimir_comando_tempover = 0;
			SCIC2_TIE = 0;
		}
	}
	/*if((imprimir_temperatura == 1) && (imprimir_comando_done == 0)){
		if(count_comando < 24){
			SCID = command_tempeture[count_comando++];
			//count_comando++;
		}
		else{
			//SCID = temperatura_limite;
			count_comando=0;
			imprimir_temperatura = 0;
			SCIC2_TIE = 0;
		}
	}*///28
}

interrupt 7 void RTI_TPM(void){
	(void)TPMSC;
	TPMSC_TOF = 0; //Timer Overflow Flag
	contador_rps++;
	tiempo_timer++;
	tiempo_LED++;
	contador_wait_LCD++;
	if(tiempo_timer == 5000){
		checar_temperatura = 1;
		tiempo_timer = 0;
	}
	if(contador_wait_LCD == 50){//200
		wait_LCD = 1;
		contador_wait_LCD = 0;
	}
	if(contador_rps == rps_velocidad){ //**************************************************Velocidad en ms*********************************************
		contador_rps = 0;
		rps_run = 1;
	}
	encender_LED = 1;
	correr_secuencia = 1; //Conexion entre el main y la interrupcion  
}

interrupt 12 void RTI_MTIM(void){
	(void)MTIMSC;
	MTIMSC_TOF  = 0;
	interruption_flag = 1;
}

void char_low_data(char letra){
	unsigned char addr = letra;
	low = (addr & 0x0F) << 4;
	low = low | 0x0D;
}

void char_high_data(char letra){
	unsigned char addr = letra;
	high = ((addr >> 4) & 0x0F) << 4;
	high = high | 0x0D;
}

void init_LCD(void){
	switch(state){
	
	case 1:	
		IICD = 0x4E; //0x3E  -----> dirección única
		MTIMMOD = 8; // 512us
		break;
/* -----------------------------------------*/	
	case 2:	
		IICD = 0x0C;
		MTIMMOD = 8; // 512us
		break;
/* -----------------------------------------*/	
	case 3:
		IICD = 0x28;
		MTIMMOD = 8; // 512us
		break;
/* -----------------------------------------*/	
	case 4:
		IICD = 0x2C;
		MTIMMOD = 8; // 512us
		// segundo envio de cmd
		break;
/* -----------------------------------------*/	
	case 5:
		IICD = 0x28;
		MTIMMOD = 8; // 512us
		break;
/* -----------------------------------------*/		
	case 6://Mandar datos a partir de este estado
		initialization_ends = 1;
		beginning_data = 1;
		state--;
		break;
/* -----------------------------------------*/		
	default:
		break;
	}	
}

void initial_data(void){
	
	switch(state2){
	
	case 1:
		if(dir_reloj[i2] != 0){
			char_high_data(dir_reloj[i2++]);
			if(i2 == 11){
				IICD = 0xDD;
			}
			else{
				IICD = high; //Upper bits
			}
			MTIMMOD = 8;
		}
		else{
			send_data_off = 1;
			state2 = 4;
		}
		break;
		
	case 2:
		IICD = 0x08;
		MTIMMOD = 8;
		break;
		
	case 3:
		char_low_data(dir_reloj[j2++]);
		if(i2 == 11){
			IICD = 0xFD;
		}
		else{
			IICD = low;//Lower bits
		}
		MTIMMOD = 8;
		break;
		
	case 4:
		IICD = 0x08;
		MTIMMOD = 8;
		break;

	case 5:
		if(send_data_off == 0){
			state2 = 0;
		}
		else{
			beginning_data = 0;
			beginning_data2 = 1;
			pos_linea_inicial = 1;
			//state2--;  //------------------> CHECAR
		}
		break;

	default:
		break;
	}
}

void send_command(void){
	
	switch(state3){
	
	case 1:
		IICD = 0x8C; 
		MTIMMOD = 8;
		break;
		
	case 2:
		IICD = 0x08;
		MTIMMOD = 8;
		break;
		
	case 3:
		IICD = 0x0C; 
		MTIMMOD = 8;
		break;
		
	case 4:
		IICD = 0x08;
		MTIMMOD = 8;
		break;
		
	case 5:
		if(beginning_data2 == 0){
			
		}
		regresar_pos = 0;
		enviar_LCD = 1;
		//state3--;
		break;
	}
}

void send_dir(void){
	
	switch(state4){
		
	case 1:
		if(dir_reloj[i3] == 0){
			//send_data_off_2 = 1;
			enviar_LCD = 0;
			state4 = 4;
			//enviar_LCD = 0;
			undone = 1;
			i3=0;
			j3=0;
		}
		else{
			char_high_data(dir_reloj[i3++]);
			if(i3 == 11){
				IICD = 0xDD;
			}
			else{
				IICD = high; //Upper bits
			}
			MTIMMOD = 8;
		}
		break;

	case 2:
		IICD = 0x08;
		MTIMMOD = 8;
		break;

	case 3:
		char_low_data(dir_reloj[j3++]);
		if(i3 == 11){
			IICD = 0xFD;
		}
		else{
			IICD = low;//Lower bits
		}
		MTIMMOD = 8;
		break;

	case 4:
		IICD = 0x08;
		MTIMMOD = 8;
		break;

	case 5:
		if(enviar_LCD == 1){
			state4 = 0;
		}
		break;

	default:
		break;
	}
}

void send_inverse_dir(void){
	
	switch(state5){

	case 1:
		if(dir_inversa_reloj[i4] == 0){
			//send_data_off_3 = 1;
			state5 = 4;
			enviar_LCD = 0;
			undone = 1;
			i4=0;
			j4=0;
		}
		else{
			char_high_data(dir_inversa_reloj[i4++]);
			if(i4 == 12){
				IICD =0xDD;
			}
			else{
				IICD = high; //Upper bits
			}
			MTIMMOD = 8;
		}
		break;

	case 2:
		IICD = 0x08;
		MTIMMOD = 8;
		break;

	case 3:
		char_low_data(dir_inversa_reloj[j4++]);
		if(i4 == 12){
			IICD = 0xFD;
		}
		else{
			IICD = low;//Lower bits
		}
		MTIMMOD = 8;
		break;

	case 4:
		IICD = 0x08;
		MTIMMOD = 8;
		break;

	case 5:
		if(enviar_LCD == 1){
			state5 = 0;
		}
		break;

	default:
		break;
	}
}

void send_linea_inicial(void){
	switch(state_linea_inicial){

	case 1:
		IICD = 0xCC;
		MTIMMOD = 8;
		break;

	case 2:
		IICD = 0x08;
		MTIMMOD = 8;
		break;

	case 3:
		IICD = 0x0C;
		MTIMMOD = 8;
		break;

	case 4:
		IICD = 0x08;
		MTIMMOD = 8;
		break;

	case 5:
		pos_linea_inicial = 0;
		enviar_RPS_inicial = 1;
		/*if(beginning_data2 == 1){
			enviar_RPS_inicial = 1;
			pos_linea_inicial = 0;
		}
		else{
			enviar_RPS = 1;
			pos_linea_dos = 0;
		}*/
		break;
	}
}

void send_RPS_inicial(void){
	
	switch(state_rps_inicial){

	case 1:
		if(rps_arr[i6] == 0){
			//send_data_off_4 = 1;
			state_rps_inicial = 4;
			//enviar_RPS = 0;
			enviar_RPS_inicial = 0;
			beginning_data2 = 0;
			undone = 1;
			//i6=0;
			//j6=0;
		}
		else{
			char_high_data(rps_arr[i6++]);
			IICD = high; //Upper bits
			MTIMMOD = 8;
		}
		break;

	case 2:
		IICD = 0x08;
		MTIMMOD = 8;
		break;

	case 3:
		char_low_data(rps_arr[j6++]);
		IICD = low;//Lower bits
		MTIMMOD = 8;
		break;

	case 4:
		IICD = 0x08;
		MTIMMOD = 8;
		break;

	case 5:
		if(enviar_RPS_inicial == 1){ // -----> CHECAR
			state_rps_inicial = 0;
		}
		break;

	default:
		break;
	}
}

void send_linea(void){
	switch(state7){

	case 1:
		IICD = 0xCC;
		MTIMMOD = 8;
		break;

	case 2:
		IICD = 0x08;
		MTIMMOD = 8;
		break;

	case 3:
		IICD = 0x0C;
		MTIMMOD = 8;
		break;

	case 4:
		IICD = 0x08;
		MTIMMOD = 8;
		break;

	case 5:
		pos_linea_dos = 0;
		enviar_RPS = 1;
		/*if(beginning_data2 == 1){
			enviar_RPS_inicial = 1;
			pos_linea_inicial = 0;
		}
		else{
			enviar_RPS = 1;
			pos_linea_dos = 0;
		}*/
		break;
	}
}

void send_RPS(void){
	
	switch(state6){

	case 1:
		if(rps_arr[i5] == 0){
			send_data_off_4 = 1;
			state6 = 4;
			enviar_RPS = 0;
			//enviar_RPS_inicial = 0;
			//beginning_data2 = 0;
			undone = 1;
			i5=0;
			j5=0;
		}
		else{
			char_high_data(rps_arr[i5++]);
			IICD = high; //Upper bits
			MTIMMOD = 8;
		}
		break;

	case 2:
		IICD = 0x08;
		MTIMMOD = 8;
		break;

	case 3:
		char_low_data(rps_arr[j5++]);
		IICD = low;//Lower bits
		MTIMMOD = 8;
		break;

	case 4:
		IICD = 0x08;
		MTIMMOD = 8;
		break;

	case 5:
		if(enviar_RPS == 1){
			state6 = 0;
		}
		break;

	default:
		break;
	}
}

/********************************************************************************/
/********************************************************************************/
/********************************************************************************/
/****************************Código motor****************************************/

void seleccionar_comando(void){
	if(choose_command == 0){
		if(command_ex[count_comando] == 0){
			SCIC2_TIE = 0; // apaga interrupcion de transmision
			count_comando=0;
			SCID = '\n';
			imprimir_comando = 0;
		}
		else{
			SCID = command_ex[count_comando++];
		}
	}
	if(choose_command == 2){
		if(command_turnoff[count_comando] == 0){
			SCIC2_TIE = 0; // apaga interrupcion de transmision
			count_comando=0;
			SCID = '\n';
		}
		else{
			SCID = command_turnoff[count_comando++];
		}
	}
	if(choose_command == 1){
		if(command_unrecognized[count_comando] == 0){
			SCIC2_TIE = 0; // apaga interrupcion de transmision
			count_comando=0;
			SCID = '\n';
		}
		else{
			SCID = command_unrecognized[count_comando++];
		}
	}
}

void check_buffer(void)
{
	j=1;
	for(j = 1; j<10; j++){
		if(temp[0] == 'R'){// RPS:99.1
			if(coincidencia < 2){
				if(temp[j] == comando_RPS[j]){
					coincidencia++;
				}
			}
			else{
				if((temp[4] >= '0') && (temp[4] <= '9')){
					rps_arr[0] = temp[4];
					centenas2 = temp[4] - 0x30;
					centenas2*=100;
					coincidencia++;
					if((temp[5] >= '0') && (temp[5] <= '9')){
						rps_arr[1] = temp[5];
						decenas2 = temp[5] - 0x30;
						decenas2*=10;
						coincidencia++;
						if((temp[7] >= '0') && (temp[7] <= '9')){
							rps_arr[3] = temp[7];
							unidades2 = temp[7] - 0x30;
							coincidencia++;
						}
						else{
							choose_command = 1;
							imprimir_comando = 1;
							coincidencia = 0;
							//i=0;
							break;
						}
					}
					else{
						choose_command = 1;
						imprimir_comando = 1;
						coincidencia = 0;
						//i=0;
						break;
					}
					velocidad = unidades2 + decenas2 + centenas2;
					rps_velocidad = operacionRPS();
					contador_rps = 0;
					if(coincidencia == 5){
						choose_command = 0;
						imprimir_comando_done = 1;
						SCIC2_TIE = 1;
						state6 = 0;
						state7 = 0;
						pos_linea_dos = 1;  //****************************************************************************************
						coincidencia = 0;
						timer = 1;
						break;
					}
					else{
						choose_command = 1;
						imprimir_comando = 1;
						coincidencia = 0;
						//i=0;
						break;
					}
				}
				else{
					choose_command = 1;
					imprimir_comando = 1;
					coincidencia = 0;
					//i=0;
					break;
				}
			}
		}
		else if(temp[0] == 'D'){// DIRC       ***************************************************************
			if(temp[j] == comando_DIR[j]){
				coincidencia++;
				if(coincidencia == 4){
					if(temp[5] == 'W'){ //derecha CW
						cambiar_direccion = 0;
						imprimir_comando_done = 1;
						SCIC2_TIE = 1;
						coincidencia = 0;
						//i=0;
						state3 = 0;
						state4 = 0;
						state5 = 0;
						regresar_pos = 1;
						break;
					}
					if(temp[5] == 'C'){ //izquierda CCW
						cambiar_direccion = 1;
						imprimir_comando_done = 1;
						SCIC2_TIE = 1;
						coincidencia = 0;
						//i=0;
						state3 = 0;
						state4 = 0;
						state5 = 0;
						regresar_pos = 1;
						break;
					}
					else{
						coincidencia = 0;
						//i=0;
						break;
					}
				}
			}
			else{
				coincidencia = 0;
				//i=0;
				break;
			}
			
		}
		else if(temp[0] == 'M'){// MOTOR:O
			if(temp[j] == comando_MOTOR[j]){
				coincidencia++;
				if(coincidencia == 4){
					if(temp[7] == 'F'){ //Apagado
						imprimir_comando_done = 1;
						SCIC2_TIE = 1;
						on_off = 0;
						coincidencia = 0;
						//i=0;
						break;
					}
					else if(temp[7] == 'N'){ //Encendido
						imprimir_comando_done = 1;
						SCIC2_TIE = 1;
						on_off = 1;
						coincidencia = 0;
						//i=0;
						break;
					}
					else{
						choose_command = 1;
						imprimir_comando = 1;
						coincidencia = 0;
						//i=0;
						break;
					}
				}
			}
			else{
				choose_command = 1;
				imprimir_comando = 1;
				coincidencia = 0;
				//i=0;
				break;
			}
		}
		else if(temp[0] == 'S'){// STEPCW:
			if(coincidencia < 5){
				if(temp[j] == comando_STEPCW[j]){
					coincidencia++;
				}
			}
			else{
				if((temp[7] >= '0') && (temp[7] <= '9')){
					centenas = temp[7] - 0x30;
					centenas*=100;
					coincidencia++;
					if((temp[8] >= '0') && (temp[8] <= '9')){
						decenas = temp[8] - 0x30;
						decenas*=10;
						coincidencia++;
						if((temp[9] >= '0') && (temp[9] <= '9')){
							unidades = temp[9] - 0x30;
							coincidencia++;
						}
						else{
							choose_command = 1;
							imprimir_comando = 1;
							coincidencia = 0;
							//i=0;
							break;
						}
					}
					else{
						choose_command = 1;
						imprimir_comando = 1;
						coincidencia = 0;
						//i=0;
						break;
					}
					grados = unidades + decenas + centenas;
					//choose_command = 0;
					//*********************************************************
					//on_off = 0;
					if(on_off == 0){
						imprimir_comando_done = 1;
						SCIC2_TIE = 1;
						movimiento = 1; //habilitar stepcw
						coincidencia = 0;
						//i=0;
						break;
					}
					else{
						choose_command = 2;
						imprimir_comando = 1;
						//i=0;
						break;
					}
				}
				else{
					choose_command = 1;
					imprimir_comando = 1;
					coincidencia = 0;
					//i=0;
					break;
				}
			}
		}
		else if(temp[0] == 'T'){ //TEMPLIMIT:ttt.t
			if(coincidencia < 8){
				if(temp[j] == comando_TEMPLIMIT[j]){
					coincidencia++;
				}
			}
			else{
				if((temp[10] >= '0') && (temp[10] <= '9')){
					millares = temp[10] - 0x30;
					millares*=100;
					coincidencia++;
					if((temp[11] >= '0') && (temp[11] <= '9')){
						centenas3 = temp[11] - 0x30;
						centenas3*=10;
						coincidencia++;
						if((temp[12] >= '0') && (temp[12] <= '9')){
							decenas3 = temp[12] - 0x30;
							//decenas3*=10;
							coincidencia++;
							if((temp[14] >= '0') && (temp[14] <= '9')){
								unidades3 = temp[14] - 0x30;
								coincidencia++;
							}
							else{
								coincidencia = 0;
								//i=0;
								break;
							}
						}
						else{
							choose_command = 1;
							imprimir_comando = 1;
							coincidencia = 0;
							//i=0;
							break;
						}
					}
					else{
						choose_command = 1;
						imprimir_comando = 1;
						coincidencia = 0;
						//i=0;
						break;
					}
					//command_tempeture[15] = temp[10];
					//command_tempeture[16] = temp[11];
					//command_tempeture[17] = temp[12];
					//command_tempeture[19] = temp[14];
					//temperatura_limite = unidades3 + decenas3 + centenas3 + millares;
					temp_limit_LCD = (decenas3 + centenas3 + millares)*10;
					coincidencia = 0;
					//i=0;
					imprimir_comando_done = 1;
					SCIC2_TIE = 1;
				}
			}
		}
		else{
			//i=0;
			choose_command = 1;
			imprimir_comando = 1;
			coincidencia = 0;
			break;
		}
	}
}

unsigned int operacion(void){ // Metodo para formatear el valor del ADC segun los pasos para que el motor de una revolucion completa

	potentiometer = ADCRL; //Registro De ADC
	op=((potentiometer)*39)+54;// ecuacion para el ADC, con base en valores de 1000, valor de nuestra pendiente -.192.
	if(potentiometer == 0){
		op=0;
	}
	return op;
}

unsigned int operacion_grados(unsigned int grados_parametro){
	unsigned int div;
	div=(((long)grados_parametro)*96)/(360);
	return div;
}

unsigned int operacionRPS(void){
	unsigned int rps;
	rps = 3000/velocidad;
	return rps;
}

void enciende_led(void){
	if(tiempo_LED < 1000){
		PTAD_PTAD1=1;
	}
	else if( tiempo_LED >= 1000 && tiempo_LED <2000){
		PTAD_PTAD1=0;
	}
	else{
		tiempo_LED=0;
	}
}

/*void num_to_character(void){
	unsigned int temperatura;
	temperatura = operacionTemp();
	command_tempeture[15] = ((char) temperatura % 10) + 0x30;
	temperatura = temperatura/10;
	command_tempeture[16] = ((char) temperatura % 10) + 0x30;
	temperatura = temperatura/10;
	command_tempeture[17] = ((char) temperatura % 10) + 0x30;
	temperatura = temperatura/10;
	command_tempeture[19] = ((char) temperatura % 10) + 0x30;
}*/

void check_temp(void){
	if(temp_limit_LCD <= operacion()){
		on_off = 0;
		imprimir_comando_tempover = 1;
		SCIC2_TIE = 1;
	}
}

void temperatura_LCD(void){
	temperatura = operacion();
	if(temperatura >= 1000){
		dir_inversa_reloj[10] = dir_reloj[9] = ((char) temperatura % 10) + 0x30; //decimales
		temperatura /=10;
		dir_inversa_reloj[8] = dir_reloj[7] = ((char) temperatura % 10) + 0x30; //unidades
		temperatura /=10;
		dir_inversa_reloj[7] = dir_reloj[6] = ((char) temperatura % 10) + 0x30; //decenas
		temperatura /=10;
		dir_inversa_reloj[6] = dir_reloj[5] = temperatura + 0x30; //centenas
	}
	else if((temperatura >= 100) && (temperatura < 1000)){
		dir_inversa_reloj[10] = dir_reloj[9] = ((char) temperatura % 10) + 0x30; //decimales
		temperatura /=10;
		dir_inversa_reloj[8] = dir_reloj[7] = ((char) temperatura % 10) + 0x30; //unidades
		temperatura /=10;
		dir_inversa_reloj[7] = dir_reloj[6] = temperatura + 0x30; //decenas
		dir_inversa_reloj[6] = dir_reloj[5] = '0'; //centenas
	}
	else if((temperatura>=10) && (temperatura < 100)){
		dir_inversa_reloj[10] = dir_reloj[9] = ((char) temperatura % 10) + 0x30; //decimales
		temperatura /=10;
		dir_inversa_reloj[8] = dir_reloj[7] = temperatura + 0x30; //unidades
		dir_inversa_reloj[7] = dir_reloj[6] = '0'; //decenas
		dir_inversa_reloj[6] = dir_reloj[5] = '0'; //centenas
	}
	else{
		dir_inversa_reloj[10] = dir_reloj[9] = temperatura + 0x30; //decimales
		dir_inversa_reloj[8] = dir_reloj[7] = '0'; //unidades
		dir_inversa_reloj[7] = dir_reloj[6] = '0'; //decenas
		dir_inversa_reloj[6] = dir_reloj[5] = '0'; //centenas
	}
}

void main(void) {
	
	//SOPT2_IICPS = 1; // para pines SCL --> 8 , SDA --> 10 
	IICF = 0xC7;
	IICC = 0xB8;

	PTBDD=0xFF;
	PTBD = 0x00;

	PTADD = 0xFF;
	PTAD = 0x00;
	
	MTIMSC = 0x40; //Habilita interrupcion
	MTIMCLK = 0x08; //PS = 256
	MTIMMOD = 255; // 16.32 ms

	/*          Configuracion TIMER          */    
	// (PS * TPMMOD) / FrecuencyCLK
	// Bus clock = 4 Mhz, Preescaler = 4   
	TPMSC = 0b01001010; // 1 µs
	TPMMOD = 1000; // 1 ms

	/*************          Configuración SERIAL        *************/
	SCIBD = 26; //busclk 4Mhz, baud rate de 9600 bps  **Baud Rate Register
	SCIC2 = 0b00101100; // TIE = 1, TE = 1, RE = 1  ***0b10101100   0x8C

	ADCCFG = 0b00100000; // 4 = 1 Configuration Register ----> Long Sample Time Configuration (Conversion completa de 10 bits) ..0x10
	ADCSC1 = 0b00100111; //Registro de ADC ----> AD7 canal cero
	APCTL1_ADPC7=1;

	i=0;
	c=0;
	counter = 0;
	counter2 = 0;
	size = 0;
	coincidencia = 0;
	j = 0;
	choose_command = 0;
	//count_comando = 0;
	enable_transmission = 0;
	on_off = 1;
	mover_en_grados = 0;
	value = 0;
	range = 0;
	movimiento = 0;
	vueltas_arreglo = 0;
	timer = 0;
	checar_arreglo = 0;
	temperatura_limite = 5000;
	imprimir_comando_tempover = 0;

	EnableInterrupts;
	for(;;) {
		if(interruption_flag == 1){
			interruption_flag = 0;
			if(initialization_ends == 1){
				if(beginning_data == 1){
					initial_data();
					state2++;
				}
				if(beginning_data2 == 1){
					if(pos_linea_inicial == 1){
						send_linea_inicial();
						state_linea_inicial++;
						state_rps_inicial=0;
					}
					if(enviar_RPS_inicial == 1){
						send_RPS_inicial();
						state_rps_inicial++;
					}
				}
				if(pos_linea_dos == 1){
					send_linea();
					state7++; // ----> Checar si se regresa el state7 a cero
					//state6=0; // -----> CHECAR
				}
				if(enviar_RPS == 1){
					send_RPS();
					state6++;
				}
				if(wait_LCD == 1){
					wait_LCD = 0;
					if(undone == 0){
						
					}
					else{
						temperatura_LCD();
						regresar_pos = 1;
						undone = 0;
					}
				}
				if(checar_temperatura == 1){
					checar_temperatura = 0;
					check_temp();
				}
				if(regresar_pos == 1){
					send_command();
					state3++;
					state5=0;
					state4=0;
				}
				if(enviar_LCD == 1){
					if(cambiar_direccion == 1){
						send_inverse_dir();
						state5++;
					}
					if(cambiar_direccion == 0){
						send_dir();
						state4++;
					}
				}
			}
			else{
				init_LCD();
				state++;
			}
		}
		/****************    CODIGO MOTOR     ********************/
		if(encender_LED == 1){
			encender_LED = 0;
			enciende_led();
		}
		if(checar_arreglo == 1){
			checar_arreglo = 0;
			check_buffer();
		}
		if(rps_run == 1){
			if(on_off == 1){
				if(cambiar_direccion == 0){ //Sentido horario
					PTBD = secuencia[posicion++];
					if(posicion == 8){ //si llega a la ultima posición regresa al inicio
						posicion=0;
					}
				}
				if(cambiar_direccion == 1){ //Sentido anti-horario
					PTBD = secuencia[i--];
					if(i == 255){
						i=7;
					}
				}
				rps_run = 0;
				correr_secuencia = 0;
			}
			if(on_off == 0){
				if(movimiento == 1){
					vueltas_arreglo = operacion_grados(grados);
					if(mover_en_grados < vueltas_arreglo){
						mover_en_grados++;
						if(cambiar_direccion == 0){ //Sentido horario
							PTBD = secuencia[posicion++];
							if(posicion == 8){ //si llega a la ultima posición regresa al inicio
								posicion=0;
							}
						}
						if(cambiar_direccion == 1){ //Sentido anti-horario
							PTBD = secuencia[i--];
							if(i == 255){
								i=7;
							}
						}
					}
					else{
						mover_en_grados = 0;
						movimiento=0;
					}
					rps_run = 0;
					correr_secuencia = 0;
				}
			}
		}
		__RESET_WATCHDOG(); //Verificar si se apaga o no
	} 
}
