#include <hidef.h> /* for EnableInterrupts macro */
#include "derivative.h" /* include peripheral declarations */
#define EN PTBD_PTBD3
#define RS PTBD_PTBD2

char interruption_flag = 0;
int contador_timer = 0;
char state = 0;
char next_state = 0;
char contador_init;
char initialization_ends = 0;

void init_LCD(void);

interrupt 12 void RTI_MTIM(void){
/*	(void)MTIMSC;
	MTIMSC_TOF = 0;
	contador_timer++;
	if(contador_timer == contador_init){
		contador_timer = 0;
		next_state++;
		state = next_state;
		interruption_flag = 1;
	}*/
	
	(void)MTIMSC;
	MTIMSC_TOF  = 0;
}

void init_LCD(void){
	switch(state){
	case 1:
		PTBD = 0x30; //function_set_1
		EN = 1;
		RS = 0;
		MTIMMOD = 2; // 8us
		contador_init = 4;
		break;
		
	case 2:
		EN = 0;
		RS = 0;
		MTIMMOD = 250; // 1ms
		contador_init = 6;
		// > 4 ms
		// primer envio de cmd
		break;

	case 3:
		PTBD = 0x30; //function_set_2
		EN = 1;
		RS = 0;
		MTIMMOD = 2; // 8us
		contador_init = 4; //32us
		// > 100us
		break;
	
	case 4:
		EN = 0;
		RS = 0;
		contador_init = 16; //128us
		// segundo envio de cmd
		break;
		
	case 5:
		PTBD = 0x30;
		EN = 1;
		RS = 0;
		contador_init = 4; //32us
		break;
		
	case 6:
		EN = 0;
		RS = 0;
		contador_init = 16; //128us
		// tercer envio de cmd
		break;
		
	case 7:
		PTBD = 0x20;
		EN = 1;
		RS = 0;
		contador_init = 4; //32us
		break;
		
	case 8:
		EN = 0;
		RS = 0;
		contador_init = 16; //128us
		// seteado en modo de 4 bits
		break;
		
	case 9:
		PTBD = 0x20;
		EN = 1;
		RS = 0;
		contador_init = 4; //32us
		break;
		
	case 10:
		EN = 0;
		RS = 0;
		contador_init = 4; //32us
		break;
		
	case 11:
		PTBD = 0x80;
		EN = 1;
		RS = 0;
		contador_init = 4; //32us
		break;
		
	case 12:
		EN = 0;
		RS = 0;
		contador_init = 16; //128us	
		//primer dato enviado en  4 bits
		break;
		
	case 13:
		PTBD = 0x00;
		EN = 1;
		RS = 0;
		contador_init = 4; //32us
		break;
		
	case 14:
		EN = 0;
		RS = 0;
		contador_init = 4; //32us
		break;
		
	case 15:
		PTBD = 0x80;
		EN = 1;
		RS = 0;
		contador_init = 4; //32us
		// segundo dato enviado en 4 bits
		break;
		
	case 16:
		EN = 0;
		RS = 0;
		contador_init = 16; //128us		
		// segundo dato enviado en 4 bits
		break;
		
	case 17:
		PTBD = 0x00;
		EN = 1;
		RS = 0;
		contador_init = 4; //32us
		break;
		
	case 18:
		EN = 0;
		RS = 0;
		contador_init = 4; //32us
		break;
		
	case 19:
		PTBD = 0x10;
		EN = 1;
		RS = 0;
		contador_init = 4; //32us
		break;
		
	case 20:
		EN = 0;
		RS = 0;
		MTIMMOD = 250; // 1ms
		contador_init = 5; //5ms
		// tercer dato enviado en 4 bits
		break;
		
	case 21:
		PTBD = 0x00;
		EN = 1;
		RS = 0;
		MTIMMOD = 2; // 1ms
		contador_init = 4; //32us
		break;
		
	case 22:
		EN = 0;
		RS = 0;
		contador_init = 4; //32us
		break;
	
	case 23:
		PTBD = 0x60;
		EN = 1;
		RS = 0;
		contador_init = 4; //32us
		break;
		
	case 24:
		EN = 0;
		RS = 0;
		contador_init = 16; //128us		
		// cuarto dato enviado en 4 bits
		break;
		
	case 25:
		initialization_ends = 1;
		break;
	}
}

void inicialization(void){
	if(state == 1){
		PTBD = 0x30; //function_set_1
		EN = 1;
		RS = 0;
		MTIMMOD = 2; // 8us
		contador_init = 4;
	}
	else if(state == 2) 
	{
		EN = 0;
		RS = 0;
		MTIMMOD = 250; // 1ms
		contador_init = 6;
		// > 4 ms
		// primer envio de cmd
	}
	else if(state == 3) 
	{
		PTBD = 0x30; //function_set_2
		EN = 1;
		RS = 0;
		MTIMMOD = 2; // 8us
		contador_init = 4; //32us
		// > 100us
	}
	else if(state == 4) //function_set_3
	{	
		EN = 0;
		RS = 0;
		contador_init = 16; //128us
		// segundo envio de cmd
	}
	else if(state == 5) //function_set_4
	{
		PTBD = 0x30;
		EN = 1;
		RS = 0;
		contador_init = 4; //32us
	}
	else if(state == 6) //function_set_5
	{
		EN = 0;
		RS = 0;
		contador_init = 16; //128us
		// tercer envio de cmd
	}
	else if(state == 7) //function_set_6
	{
		PTBD = 0x20;
		EN = 1;
		RS = 0;
		contador_init = 4; //32us
	}
	else if(state == 8) //function_set_7
	{
		EN = 0;
		RS = 0;
		contador_init = 16; //128us
		// seteado en modo de 4 bits
	}
	else if(state == 9) //function_set_8
	{
		PTBD = 0x20;
		EN = 1;
		RS = 0;
		contador_init = 4; //32us
	}
	else if(state == 10) //function_set_8
	{
		EN = 0;
		RS = 0;
		contador_init = 4; //32us
	}
	else if(state == 11) //function_set_8
	{
		PTBD = 0x80;
		EN = 1;
		RS = 0;
		contador_init = 4; //32us
	}
	else if(state == 12) //function_set_8
	{	
		EN = 0;
		RS = 0;
		contador_init = 16; //128us	
		//primer dato enviado en  4 bits
	}
	else if(state == 13) //function_set_8
	{
		PTBD = 0x00;
		EN = 1;
		RS = 0;
		contador_init = 4; //32us
	}
	else if(state == 14) //function_set_8
	{
		EN = 0;
		RS = 0;
		contador_init = 4; //32us
	}
	else if(state == 15) //function_set_8
	{
		PTBD = 0x80;
		EN = 1;
		RS = 0;
		contador_init = 4; //32us
		// segundo dato enviado en 4 bits
	}
	else if(state == 16) //function_set_8
	{
		EN = 0;
		RS = 0;
		contador_init = 16; //128us		
		// segundo dato enviado en 4 bits
	}
	else if(state == 17) //function_set_8
	{
		PTBD = 0x00;
		EN = 1;
		RS = 0;
		contador_init = 4; //32us
	}
	else if(state == 18){
		EN = 0;
		RS = 0;
		contador_init = 4; //32us
	}
	else if(state == 19) //function_set_8
	{
		PTBD = 0x10;
		EN = 1;
		RS = 0;
		contador_init = 4; //32us
	}
	else if(state == 20){
		EN = 0;
		RS = 0;
		MTIMMOD = 250; // 1ms
		contador_init = 5; //5ms
		// tercer dato enviado en 4 bits
	}
	else if(state == 21){
		PTBD = 0x00;
		EN = 1;
		RS = 0;
		MTIMMOD = 2; // 1ms
		contador_init = 4; //32us
	}
	else if(state == 22){
		EN = 0;
		RS = 0;
		contador_init = 4; //32us
	}
	else if(state == 23){
		PTBD = 0x60;
		EN = 1;
		RS = 0;
		contador_init = 4; //32us
	}
	else if(state == 24){
		EN = 0;
		RS = 0;
		contador_init = 16; //128us		
		// cuarto dato enviado en 4 bits
	}
	else if(state == 25){
		initialization_ends = 1;
	}
}

void main(void) {
	MTIMSC = 0b01000000;
	MTIMCLK = 0b00000100; //PS = 16
	MTIMMOD = 250; // 1ms
	
	PTBDD=0xFF;
	PTBD = 0x00;

	PTADD = 0xFF;
	PTAD = 0x00;

	SOPT1 = 0x52;
	contador_init = 122;

	EnableInterrupts;
	for(;;) {
/*		if(interruption_flag == 1){
			interruption_flag = 0;
			if(initialization_ends == 0){
				init_LCD();
			}
		}
		
		__RESET_WATCHDOG();	 feeds the dog */
	} 
}
