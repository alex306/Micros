#include <hidef.h> /* for EnableInterrupts macro */
#include "derivative.h" /* include peripheral declarations */
#define EN PTBD_PTBD3
#define RS PTBD_PTBD2

/*enum states{
	POWER_ON,
	FUNCTION_SET_2,
	FUNCTION_SET_3,
	FUNCTION_SET_4,
	FUNCTION_SET_5,
	FUNCTION_SET_6,
	FUNCTION_SET_7,
	FUNCTION_SET_8
};
enum states state;
enum states next_state;*/

unsigned char interruption_flag = 0;
unsigned char flag = 0;
unsigned char initialization_ends = 0;
//unsigned char EN = 0;
//unsigned char RS = 0;
unsigned char counter = 0;
unsigned char power_on = 1;
/*unsigned char function_set_2 = 2;
unsigned char function_set_3 = 3;
unsigned char function_set_4 = 4;
unsigned char function_set_5 = 5;
unsigned char function_set_6 = 6;
unsigned char function_set_7 = 7;
unsigned char function_set_8 = 8;*/
unsigned char state = 1;
//unsigned char initialization_ends = 0;

/*interrupt 7 void RTI_TPM(void){
	(void)TPMSC;
	TPMSC_TOF = 0; //Timer Overflow Flag
	interruption_flag = 1;
	//flag = 1;
	//next_state = state;
}*/

void delay_1ms(unsigned int tiempo)//genera 1 ms (probar)
{
	//delay formula is (PS*(MTIMMOD + 1)) / FrecuencyCLK
	unsigned int i;
	MTIMCLK = 0b00000100; //PS = 16
	MTIMMOD = 250; // 1ms
	MTIMSC = 0;
	for(i = 0; i < tiempo; i++){
		do{
			__RESET_WATCHDOG();
		}while(MTIMSC_TOF == 0);
		MTIMSC_TRST = 1;
	}
}

void delay_1us(unsigned int tiempo)//genera 1 ms (probar)
{
	//delay formula is (PS*(MTIMMOD + 1)) / FrecuencyCLK
	unsigned int i;
	MTIMCLK = 0b00000010; //PS = 4
	MTIMMOD = 1; // 1us
	MTIMSC = 0;
	for(i = 0; i < tiempo; i++){
		do{
			__RESET_WATCHDOG();
		}while(MTIMSC_TOF == 0);
		MTIMSC_TRST = 1;
	}
}

void lcd_inicialization(void)
{
	if(state == 1) //Power on
	{
		delay_1ms(122);
		PTBD = 0x30;
		EN = 1;
		RS = 0;
		delay_1us(32);
		state = 2;
	}
	else if(state == 2) //function_set_2
	{
		EN = 0;
		RS = 0;
		delay_1ms(6); // > 4 ms
		state = 3;				// primer envio de cmd
	}
	else if(state == 3) //function_set_3
	{
		PTBD = 0x30;
		EN = 1;
		RS = 0;
		delay_1us(32); // > 100us
		state = 4;
	}
	else if(state == 4) //function_set_4
	{	
		EN = 0;
		RS = 0;
		delay_1us(128);
		state = 5;		// segundo envio de cmd
	}
	else if(state == 5) //function_set_5
	{
		PTBD = 0x30;
		EN = 1;
		RS = 0;
		delay_1us(32);
		state = 6;
	}
	else if(state == 6) //function_set_6
	{
		EN = 0;
		RS = 0;
		delay_1us(128);
		state = 7;		// tercer envio de cmd
	}
	else if(state == 7) //function_set_7
	{
		PTBD = 0x20;
		EN = 1;
		RS = 0;
		delay_1us(32);
		state = 8;
	}
	else if(state == 8) //function_set_8
	{
		EN = 0;
		RS = 0;
		delay_1us(128);
		state = 9;		// seteado en modo de 4 bits
	}
	else if(state == 9) //function_set_8
	{
		PTBD = 0x20;
		EN = 1;
		RS = 0;
		delay_1us(32);
		state = 10;
	}
	else if(state == 10) //function_set_8
	{
		EN = 0;
		RS = 0;
		delay_1us(32);
		state = 11;
	}
	else if(state == 11) //function_set_8
	{
		PTBD = 0x80;
		EN = 1;
		RS = 0;
		delay_1us(32);
		state = 12;
	}
	else if(state == 12) //function_set_8
	{	
		EN = 0;
		RS = 0;
		delay_1us(128);	//primer dato enviado en  4 bits
		state = 13;
	}
	else if(state == 13) //function_set_8
	{
		PTBD = 0x00;
		EN = 1;
		RS = 0;
		delay_1us(32);
		state = 14;
	}
	else if(state == 14) //function_set_8
	{
		EN = 0;
		RS = 0;
		delay_1us(32);
		state = 15;
	}
	else if(state == 15) //function_set_8
	{
		PTBD = 0x80;
		EN = 1;
		RS = 0;
		delay_1us(32);
		state = 16;	// segundo dato enviado en 4 bits
	}
	else if(state == 16) //function_set_8
	{
		EN = 0;
		RS = 0;
		delay_1us(128);	// segundo dato enviado en 4 bits
		state = 17;
	}
	else if(state == 17) //function_set_8
	{
		PTBD = 0x00;
		EN = 1;
		RS = 0;
		delay_1us(32);
		state = 18;
	}
	else if(state == 18){
		EN = 0;
		RS = 0;
		delay_1us(32);
		state = 19;
	}
	else if(state == 19) //function_set_8
	{
		PTBD = 0x10;
		EN = 1;
		RS = 0;
		delay_1us(32);
		state = 20;
	}
	else if(state == 20){
		EN = 0;
		RS = 0;
		delay_1ms(5);	// tercer dato enviado en 4 bits
		state = 21;
	}
	else if(state == 21){
		PTBD = 0x00;
		EN = 1;
		RS = 0;
		delay_1us(32);
		state = 22;
	}
	else if(state == 22){
		EN = 0;
		RS = 0;
		delay_1us(32);
		state = 23;
	}
	else if(state == 23){
		PTBD = 0x60;
		EN = 1;
		RS = 0;
		delay_1us(32);
		state = 24;
	}
	else if(state == 24){
		EN = 0;
		RS = 0;
		delay_1us(128);		// cuarto dato enviado en 4 bits
		state = 25;
	}
	else if(state == 25){
		initialization_ends = 1;
	}
}

void main(void) {
	/*          Configuracion TIMER          */    
	// (PS * TPMMOD) / FrecuencyCLK
	// Bus clock = 4 Mhz, Preescaler = 4   
	/*TPMSC = 0b01001010; // 1 Âµs
	TPMMOD = 1000; // 1 ms */
	
	PTBDD=0xFF;
	PTBD = 0x00;
	
	PTADD = 0xFF;
	PTAD = 0x00;
	
	SOPT1 = 0x52;
	
	EnableInterrupts;
	for(;;) {
		if(initialization_ends == 0){
			lcd_inicialization();
		}
		/*if(led == 1){
			PTBD_PTBD7 = 1;
			delay(1000);
			led = 0;
		}
		else{
			PTBD_PTBD7 = 0;
			delay(1000);
			led = 1;
		}*/
		/*switch(state){

		case LED_ON:
			//flag_1s = 0;
			//PTBD_PTBD7 = 1;
			delay(1000);
			state = LED_OFF;
			break;

		case LED_OFF:
			//flag_1s = 0;
			PTBD_PTBD7 = 0;
			delay(1000);
			state = LED_ON;
			break;
		}*/
		__RESET_WATCHDOG();	/* feeds the dog */
	} 
}
