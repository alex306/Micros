#include <hidef.h> /* for EnableInterrupts macro */
#include "derivative.h" /* include peripheral declarations */
#define EN PTBD_PTBD3
#define RS PTBD_PTBD2

char interruption_flag = 0;
char state = 0;
char state2 = 0;
char initialization_ends = 0;
char up_bits_letter[] = {0x40,0x50}; //C,W
char low_bits_letter[] = {0x30,0x70};//C,W
char letters[] = {'C','C','W',' ','-',' ','2','2','.','3',' '};
char i = 0;
char j = 0;
char send_data_off = 0;
char low;
char high;

void init_LCD(void);
void send_data(void);
void char_lowN(char letra);
void char_highN(char letra);

interrupt 12 void RTI_MTIM(void){
	(void)MTIMSC;
	MTIMSC_TOF  = 0;
	interruption_flag = 1;
}

void init_LCD(void){
	switch(state){
	/* Esperar a que suba el voltaje */
	case 1:	/* Trigger del estado (0x30)*/
		PTBD = 0x30; //function_set_1
		EN = 1;
		RS = 0;
		MTIMMOD = 1; // 64us
		break;
		
	case 2:	/* Manda el dato (0x30)*/
		EN = 0;
		RS = 0;
		MTIMMOD = 128; // 8.1ms
		// > 4 ms
		// primer envio de cmd
		break;
/* -----------------------------------------*/	
	case 3:
		PTBD = 0x30; //function_set_2
		EN = 1;
		RS = 0;
		MTIMMOD = 1; // 8us
		// > 100us
		break;
	
	case 4:
		EN = 0;
		RS = 0;
		MTIMMOD = 4;
		// segundo envio de cmd
		break;
/* -----------------------------------------*/	
	case 5:
		PTBD = 0x30;
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 6:
		EN = 0;
		RS = 0;
		MTIMMOD = 4;
		break;
/* -----------------------------------------*/		
	case 7:
		PTBD = 0x20;
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 8:
		EN = 0;
		RS = 0;
		MTIMMOD = 4;
		break;
/* -----------------------------------------*/			
	case 9:
		PTBD = 0x20;
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 10:
		EN = 0;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 11:
		PTBD = 0xA0;
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 12:
		EN = 0;
		RS = 0;
		MTIMMOD = 4;
		break;
		
/* -----------------------------------------*/		
		
	case 13:
		PTBD = 0x00;
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 14:
		EN = 0;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 15:
		PTBD = 0xF0;
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 16:
		EN = 0;
		RS = 0;
		MTIMMOD = 4;
		break;
		
/* -----------------------------------------*/		
		
	case 17:
		PTBD = 0x00;
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 18:
		EN = 0;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 19:
		PTBD = 0x10;
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 20:
		EN = 0;
		RS = 0;
		MTIMMOD = 96;
		break;

/* -----------------------------------------*/	
		
	case 21:
		PTBD = 0x00;
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 22:
		EN = 0;
		RS = 0;
		MTIMMOD = 1;
		break;
	
	case 23:
		PTBD = 0x60;
		EN = 1;
		RS = 0;
		MTIMMOD = 1;
		break;
		
	case 24:
		EN = 0;
		RS = 0;
		MTIMMOD = 1;
		break;
		
/* -----------------------------------------*/		
		
	case 25:
		initialization_ends = 1;
		//state2++;
		//send_commands();
		state--;
		break;
	
	default:
		break;
	}	
}

void send_data(void){
	
	switch(state2){
	
	case 1:
		if(letters[i] == 0){
			send_data_off = 1;
			state2 = 4;
		}
		else{
			char_highN(letters[i++]);
			PTBD = high; //Upper bits
			EN = 1;
			RS = 1;
			MTIMMOD = 1;
		}
		break;
		
	case 2:
		EN = 0;
		RS = 1;
		MTIMMOD = 4;
		break;
		
	case 3:
		char_lowN(letters[j++]);
		PTBD = low;//Lower bits
		EN = 1;
		RS = 1;
		MTIMMOD = 1;
		break;
		
	case 4:
		EN = 0;
		RS = 1;
		MTIMMOD = 4;
		break;

	case 5:
		if(send_data_off == 0){
			state2 = 0;
		}
		else{
			state2--;
		}
		break;

	default:
		break;
	}
}

void char_lowN(char letra){
	unsigned char addr = letra;
	low = (addr & 0x0F) << 4;
	//return low;
}

void char_highN(char letra){
	unsigned char addr = letra;
	high = ((addr >> 4) & 0x0F) << 4;
	//return high;
}

void main(void) {
	char enviar = 1;
	
	MTIMSC = 0x40; //Habilita interrupcion
	MTIMCLK = 0x08; //PS = 256
	MTIMMOD = 255; // 16.32 ms

	PTBDD=0xFF;
	PTBD = 0x00;

	PTADD = 0xFF;
	PTAD = 0x00;

	SOPT1 = 0x52;

	EnableInterrupts;
	for(;;) {

		if(interruption_flag == 1){
			interruption_flag = 0;
			if(initialization_ends == 1){
				send_data();
				state2++;
			}
			else{
				init_LCD();
				state++;
			}
		}
		/*if(initialization_ends == 1){
			if(enviar == 1){
				PTBD = 0xC0;
				enviar = 0;
			}
		}*/
		//__RESET_WATCHDOG();	 feeds the dog */
	} 
}

